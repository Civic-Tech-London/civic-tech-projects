networks:
  web:
    external: false

volumes:
  certs:
  vhostd:
  html:
  dhparam:

services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - web
    restart: unless-stopped

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    depends_on:
      - nginx-proxy
    environment:
      NGINX_PROXY_CONTAINER: "nginx-proxy"
      # For first-time testing (avoid rate limits), you can enable staging:
      # ACME_CA_URI: https://acme-staging-v02.api.letsencrypt.org/directory
    volumes:
      - certs:/etc/nginx/certs
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    # Don't publish to host; let nginx-proxy route to this internal port
    expose:
      - "${APP_INTERNAL_PORT}"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      # Tell nginx-proxy where to send traffic, and enable certs
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_HOST: "${LETSENCRYPT_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"
      VIRTUAL_PORT: "${APP_INTERNAL_PORT}"
    command: npm run dev
    networks:
      - web
    restart: unless-stopped